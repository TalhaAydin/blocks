{"version":3,"sources":["redux/actions/entities.ts","ui/GameGrid.tsx","ui/GameBlock.tsx","utils/coordinate.ts","utils/point.ts","utils/vector.ts","utils/blocks.ts","utils/angle.ts","utils/entities.ts","redux/selectors/entities.ts","redux/actions/game.ts","redux/reducers/game.ts","redux/actions/messages.ts","utils/game.ts","redux/selectors/game.ts","utils/controls.ts","hooks/useKey.ts","hooks/useKeyboardControls.ts","components/Field.tsx","ui/InfoGlossary.tsx","ui/InfoGlossaryEntry.tsx","ui/InfoScreen.tsx","ui/InfoSection.tsx","ui/InfoTable.tsx","ui/InfoTableCell.tsx","ui/InfoTableHeader.tsx","ui/InfoTableRow.tsx","components/Info.tsx","components/App.tsx","reportWebVitals.ts","utils/size.ts","redux/reducers/entities.ts","redux/reducers/messages.ts","redux/reducers/root.ts","utils/piece.ts","redux/middleware/descendPiece.ts","utils/messages.ts","redux/store.ts","redux/middleware/addPiece.ts","redux/middleware/dontRotate.ts","redux/middleware/buildPile.ts","redux/middleware/limitMovement.ts","redux/middleware/fixRotation.ts","redux/middleware/clearLines.ts","redux/middleware/gravitatePile.ts","utils/misc.ts","redux/middleware/logMessage.ts","redux/middleware/addPile.ts","redux/middleware/resetGame.ts","index.tsx"],"names":["EntityRotationDirection","EntitiesActionType","GameGrid","width","height","children","data-testid","style","display","gridTemplateColumns","gridTemplateRows","gap","GameBlock","color","x","y","boxSizing","border","backgroundColor","gridColumn","gridRow","getHash","type","isEqual","a","b","createPoint","getPoint","hash","test","isPointHash","TypeError","split","parseInt","movePoint","point","vector","getOutOfBounds","size","points","filter","p","Array","isArray","every","isWithinBounds","getOverlaps","first","second","sp","some","fp","createVector","addVector","vectorA","vectorB","Movement","Left","Right","Up","Down","isZeroVector","moveBlocks","blocks","mapBlocks","c","getPoints","Object","keys","map","h","mapper","fromEntries","entries","filterBlocks","rotateBlockPoint","angleInDegrees","angleInRadians","Math","cos","sin","rotatePoint","PI","getRadians","round","groupByRow","reduce","result","pointHash","blockConfig","getNextEntityRotation","currentRotation","direction","getPlacedEntityBlocks","data","shape","position","rotation","createEntityData","getEntities","state","entities","getEntityData","id","createSelector","getAllBlocks","values","GameActionType","isEntitiesActionWithTarget","action","v","ADD","RESET","includes","addEntity","moveEntity","MOVE","setBlocks","SET_BLOCKS","deleteEntity","DELETE","GameStatus","setStatus","status","SET_STATUS","MessagesActionType","initialState","PENDING","lineClears","isGameInProgress","ACTIVE","PAUSED","getLevel","floor","s","getGame","game","getStatus","getLineClears","getLineClearsCount","lineCount","l","length","getTotalLinesCleared","r","getLevelUtil","getScore","score","i","slice","isGameStartable","isGamePausable","isGameEndable","isGameCreatable","OVER","isPieceControllable","useKey","keyCode","enabled","useEffect","handler","e","code","preventDefault","document","addEventListener","removeEventListener","useKeyboardControls","dispatch","useDispatch","gameStatus","useSelector","ctrlKey","ROTATE","Field","allBlocks","window","blockPointHash","InfoGlossary","InfoGlossaryEntry","term","details","opacity","InfoScreen","fontFamily","padding","InfoSection","header","InfoTable","borderCollapse","InfoTableCell","InfoTableHeader","scope","fontWeight","textAlign","InfoTableRow","Info","totalLinesCleared","singleLineClears","doubleLineClears","tripleLineClears","quadLineClears","level","isControllable","version","href","target","rel","flex","marginLeft","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createSize","rootReducer","combineReducers","console","warn","nextState","ADD_BLOCKS","DELETE_BLOCKS","pointHashes","ADD_LINE_CLEAR","count","RESET_LINE_CLEARS","messages","message","createIPiece","createOPiece","createTPiece","createJPiece","createLPiece","createSPiece","createZPiece","timeoutId","gameMessages","store","createStore","composeWithDevTools","applyMiddleware","getState","next","nextPiece","random","call","nextPiecePoints","restPoints","currentPiece","oPiecePoints","currentPiecePoints","entityBefore","entityAfter","addBlocks","entityData","restEntityData","blockPath","abs","fill","getBlockPath","blockPathEndIndex","findIndex","_","undefined","rotatedEntityData","placedEntityBlocks","fullLineBlocks","fullLinePoints","start","end","currentRows","currentRowKeys","k","sort","currentRowCount","newBlocks","rowY","content","previousStatus","nextStatus","hasPiece","clearTimeout","setTimeout","max","getDescentDelay","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4a626a67.chunk.js","sourcesContent":["import { Action, AnyAction } from 'redux'\nimport { Blocks } from '../../utils/blocks'\nimport { Point } from '../../utils/point'\nimport { Vector } from '../../utils/vector'\nimport { EntityData, EntityID } from '../reducers/entities'\n\n// types & type guards\n\nexport enum EntityRotationDirection {\n  Left = -90,\n  Right = 90,\n}\n\nexport enum EntitiesActionType {\n  ADD = 'ENTITIES_ADD',\n  MOVE = 'ENTITIES_MOVE',\n  ROTATE = 'ENTITIES_ROTATE',\n  ADD_BLOCKS = 'ENTITIES_ADD_BLOCKS',\n  DELETE_BLOCKS = 'ENTITIES_DELETE_BLOCKS',\n  SET_BLOCKS = 'ENTITIES_SET_BLOCKS',\n  DELETE = 'ENTITIES_DELETE',\n  RESET = 'ENTITIES_RESET',\n}\n\nexport interface AddEntityAction extends Action<EntitiesActionType.ADD> {\n  id: EntityID\n  data: EntityData\n}\n\nexport interface MoveEntityAction extends Action<EntitiesActionType.MOVE> {\n  id: EntityID\n  vector: Vector\n}\n\nexport interface RotateEntityAction extends Action<EntitiesActionType.ROTATE> {\n  id: EntityID\n  direction: EntityRotationDirection\n}\n\nexport interface AddBlocksAction extends Action<EntitiesActionType.ADD_BLOCKS> {\n  id: EntityID\n  blocks: Blocks\n}\n\nexport interface DeleteBlocksAction\n  extends Action<EntitiesActionType.DELETE_BLOCKS> {\n  id: EntityID\n  points: Point[]\n}\n\nexport interface SetBlocksAction extends Action<EntitiesActionType.SET_BLOCKS> {\n  id: EntityID\n  blocks: Blocks\n}\n\nexport interface DeleteEntityAction extends Action<EntitiesActionType.DELETE> {\n  id: EntityID\n}\n\nexport interface ResetEntityAction extends Action<EntitiesActionType.RESET> {}\n\nexport type EntitiesActions =\n  | AddEntityAction\n  | MoveEntityAction\n  | RotateEntityAction\n  | AddBlocksAction\n  | DeleteBlocksAction\n  | SetBlocksAction\n  | DeleteEntityAction\n  | ResetEntityAction\n\nexport type EntitiesActionsWithTarget = Exclude<\n  EntitiesActions,\n  AddEntityAction | ResetEntityAction\n>\n\nexport const isEntitiesActionWithTarget = (\n  action: AnyAction\n): action is EntitiesActionsWithTarget =>\n  Object.values(EntitiesActionType)\n    .filter(\n      (v) => ![EntitiesActionType.ADD, EntitiesActionType.RESET].includes(v)\n    )\n    .some((v) => v === action.type)\n\n// implementations\n\nexport const addEntity = (id: EntityID, data: EntityData): AddEntityAction => ({\n  type: EntitiesActionType.ADD,\n  id,\n  data,\n})\n\nexport const moveEntity = (id: EntityID, vector: Vector): MoveEntityAction => ({\n  type: EntitiesActionType.MOVE,\n  id,\n  vector,\n})\n\nexport const rotateEntity = (\n  id: EntityID,\n  direction: EntityRotationDirection\n): RotateEntityAction => ({\n  type: EntitiesActionType.ROTATE,\n  id,\n  direction,\n})\n\nexport const addBlocks = (id: EntityID, blocks: Blocks): AddBlocksAction => ({\n  type: EntitiesActionType.ADD_BLOCKS,\n  id,\n  blocks,\n})\n\nexport const setBlocks = (id: EntityID, blocks: Blocks): SetBlocksAction => ({\n  type: EntitiesActionType.SET_BLOCKS,\n  id,\n  blocks,\n})\n\nexport const deleteBlocks = (\n  id: EntityID,\n  points: Point[]\n): DeleteBlocksAction => ({\n  type: EntitiesActionType.DELETE_BLOCKS,\n  id,\n  points,\n})\n\nexport const deleteEntity = (id: EntityID): DeleteEntityAction => ({\n  type: EntitiesActionType.DELETE,\n  id,\n})\n\nexport const resetEntities = (): ResetEntityAction => ({\n  type: EntitiesActionType.RESET,\n})\n","interface GameGridProps {\n  width: number\n  height: number\n}\n\nexport const GameGrid: React.FC<GameGridProps> = ({\n  width,\n  height,\n  children,\n}) => {\n  return (\n    <div\n      data-testid=\"game.field\"\n      style={{\n        height: '100%',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${width}, 1fr)`,\n        gridTemplateRows: `repeat(${height}, 1fr)`,\n        gap: '1px 1px',\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import { StandardLonghandProperties } from 'csstype'\n\nexport interface GameBlockProps {\n  color: StandardLonghandProperties['backgroundColor']\n  x: number\n  y: number\n}\n\nexport const GameBlock: React.FC<GameBlockProps> = ({ color, x, y }) => {\n  return (\n    <div\n      data-testid=\"game.block\"\n      style={{\n        boxSizing: 'border-box',\n        border: 'solid 1px black',\n        backgroundColor: color,\n        width: '100%',\n        height: '100%',\n        gridColumn: `${x + 1} / span 1`,\n        gridRow: `${y + 1} / span 1`,\n      }}\n    />\n  )\n}\n","export interface Coordinate {\n  readonly type: string\n  readonly x: number\n  readonly y: number\n}\n\nexport const getHash = <T extends Coordinate>({ type, x, y }: T): string =>\n  `${type}:${x}:${y}`\n\nexport const isEqual = <T extends Coordinate>(a: T, b: T) =>\n  a.x === b.x && a.y === b.y\n","import { Coordinate, isEqual } from './coordinate'\nimport { Size } from './size'\nimport { Vector } from './vector'\n\nexport interface Point extends Coordinate {\n  readonly type: 'point'\n}\n\nexport type PointHash = string\n\nexport const isPointHash = (hash: string): boolean =>\n  /^point:-?\\d+:-?\\d+$/.test(hash)\n\nexport const createPoint = (x: number, y: number): Point => ({\n  type: 'point',\n  x,\n  y,\n})\n\nexport const getPoint = (hash: string): Point => {\n  if (!isPointHash(hash)) {\n    throw new TypeError('Not a hash of Point')\n  }\n  const split = hash.split(':', 3)\n  return createPoint(parseInt(split[1], 10), parseInt(split[2], 10))\n}\n\nexport const movePoint = (point: Point, vector: Vector): Point =>\n  createPoint(point.x + vector.x, point.y + vector.y)\n\nexport const isWithinBounds = (size: Size) => (point: Point | Point[]) =>\n  (Array.isArray(point) ? point : [point]).every(\n    (p) => p.x < size.width && p.y < size.height && p.x >= 0 && p.y >= 0\n  )\n\nexport const getOutOfBounds = (size: Size) => (points: Point[]) =>\n  points.filter((p) => !isWithinBounds(size)(p))\n\nexport const getOverlaps = (first: Point[]) => (second: Point[]) =>\n  second.filter((sp) => first.some((fp) => isEqual(fp, sp)))\n","import { Coordinate } from './coordinate'\n\nexport interface Vector extends Coordinate {\n  readonly type: 'vector'\n}\n\nexport type VectorHash = string\n\nexport const isVectorHash = (hash: string): boolean =>\n  /^vector:-?\\d+:-?\\d+$/.test(hash)\n\nexport const createVector = (x: number, y: number): Vector => ({\n  type: 'vector',\n  x,\n  y,\n})\n\nexport const getVector = (hash: string): Vector => {\n  if (!isVectorHash(hash)) {\n    throw new TypeError('Not a hash of Vector')\n  }\n  const split = hash.split(':', 3)\n  return createVector(parseInt(split[1], 10), parseInt(split[2], 10))\n}\n\nexport const addVector = (vectorA: Vector, vectorB: Vector): Vector =>\n  createVector(vectorA.x + vectorB.x, vectorA.y + vectorB.y)\n\nexport const Movement: Record<string, Vector> = {\n  Left: createVector(-1, 0),\n  Right: createVector(1, 0),\n  Up: createVector(0, -1),\n  Down: createVector(0, 1),\n}\n\nexport const isZeroVector = (vector: Vector): boolean =>\n  vector.x === 0 && vector.y === 0\n\nexport const isDownVector = (vector: Vector): boolean => vector.y > 0\n","import { StandardLonghandProperties } from 'csstype'\nimport { getRadians, rotatePoint } from './angle'\nimport { getHash } from './coordinate'\nimport { createPoint, getPoint, movePoint, Point, PointHash } from './point'\nimport { createVector, Vector } from './vector'\n\nexport type BlockConfig = {\n  color: StandardLonghandProperties['backgroundColor']\n}\n\nexport type Blocks = Record<PointHash, BlockConfig>\n\nexport const moveBlocks = (blocks: Blocks, vector: Vector): Blocks =>\n  mapBlocks(blocks, (p, c) => [movePoint(p, vector), c])\n\nexport const rotateBlocks = (blocks: Blocks, angleInDegrees: number): Blocks =>\n  mapBlocks(blocks, (p, c) => [rotateBlockPoint(p, angleInDegrees), c])\n\nexport const getPoints = (blocks: Blocks): Point[] =>\n  Object.keys(blocks).map((h) => getPoint(h))\n\nexport const mapBlocks = (\n  blocks: Blocks,\n  mapper: (point: Point, config: BlockConfig) => [Point, BlockConfig]\n) =>\n  Object.fromEntries(\n    Object.entries(blocks)\n      .map(([h, c]): [Point, BlockConfig] => [getPoint(h), c])\n      .map(([p, c]) => mapper(p, c))\n      .map(([p, c]) => [getHash(p), c])\n  )\n\nexport const filterBlocks = (\n  blocks: Blocks,\n  filter: (point: Point, config: BlockConfig) => boolean\n): Blocks =>\n  Object.fromEntries(\n    Object.entries(blocks)\n      .map(([h, c]): [Point, BlockConfig] => [getPoint(h), c])\n      .filter(([p, c]) => filter(p, c))\n      .map(([p, c]) => [getHash(p), c])\n  )\n\nexport const rotateBlockPoint = (\n  point: Point,\n  angleInDegrees: number\n): Point => {\n  const p = rotatePoint(point, getRadians(angleInDegrees))\n  return createPoint(Math.round(p.x) + 0, Math.round(p.y) + 0) // add 0 to fix -0\n}\n\nexport const getBlockPath = (vector: Vector): Vector[] => [\n  ...Array(Math.abs(vector.x))\n    .fill(0)\n    .map(() => createVector(vector.x > 0 ? 1 : -1, 0)),\n  ...Array(Math.abs(vector.y))\n    .fill(0)\n    .map(() => createVector(0, vector.y > 0 ? 1 : -1)),\n]\n\nexport const groupByRow = (blocks: Blocks): Record<number, Blocks> =>\n  Object.entries(blocks).reduce<Record<number, Blocks>>(\n    (result, [pointHash, blockConfig]) => {\n      const point = getPoint(pointHash)\n      return {\n        ...result,\n        [point.y]: {\n          ...(result[point.y] || {}),\n          [getHash(point)]: blockConfig,\n        },\n      }\n    },\n    {}\n  )\n","import { createPoint, Point } from './point'\n\n// https://en.wikipedia.org/wiki/Rotation_matrix\nexport const rotatePoint = (point: Point, angleInRadians: number): Point =>\n  createPoint(\n    point.x * Math.cos(angleInRadians) - point.y * Math.sin(angleInRadians),\n    point.x * Math.sin(angleInRadians) + point.y * Math.cos(angleInRadians)\n  )\n\n// https://en.wikipedia.org/wiki/Radian\nexport const getRadians = (angleInDegrees: number) =>\n  angleInDegrees * (Math.PI / 180)\n","import { EntityRotationDirection } from '../redux/actions/entities'\nimport { EntityData } from '../redux/reducers/entities'\nimport { Blocks, moveBlocks, rotateBlocks } from './blocks'\nimport { Vector } from './vector'\n\nexport const getNextEntityRotation = (\n  currentRotation: number,\n  direction: EntityRotationDirection\n): number => (360 + currentRotation + direction) % 360\n\nexport const getPlacedEntityBlocks = (data: EntityData | EntityData[]) =>\n  (Array.isArray(data) ? data : [data]).reduce(\n    (result, { shape, position, rotation }) => ({\n      ...result,\n      ...moveBlocks(rotateBlocks(shape, rotation), position),\n    }),\n    {}\n  )\n\nexport const createEntityData = (\n  shape: Blocks,\n  position: Vector,\n  rotation: number\n) => ({\n  shape,\n  position,\n  rotation,\n})\n","import { createSelector } from 'reselect'\nimport { RootState } from '../reducers/root'\nimport { EntitiesState, EntityData, EntityID } from '../reducers/entities'\nimport { Blocks } from '../../utils/blocks'\nimport { getPlacedEntityBlocks } from '../../utils/entities'\n\nexport const getEntities = (state: RootState): EntitiesState => state.entities\n\nexport const getEntityData = (id: EntityID) =>\n  createSelector(\n    getEntities,\n    (entities): EntityData | undefined => entities[id]\n  )\n\nexport const getAllBlocks = createSelector(\n  getEntities,\n  (entities): Blocks => getPlacedEntityBlocks(Object.values(entities))\n)\n\nexport const hasEntity = (id: EntityID) =>\n  createSelector(getEntities, (entities): boolean => !!entities[id])\n","import { Action } from 'redux'\nimport { GameStatus } from '../reducers/game'\n\n// types & type guards\n\nexport enum GameActionType {\n  SET_STATUS = 'GAME_SET_STATUS',\n  ADD_LINE_CLEAR = 'GAME_ADD_LINE_CLEAR',\n  RESET_LINE_CLEARS = 'GAME_RESET_LINE_CLEARS',\n}\n\nexport interface SetStatusGameAction extends Action<GameActionType.SET_STATUS> {\n  status: GameStatus\n}\n\nexport interface AddClearedLinesGameAction\n  extends Action<GameActionType.ADD_LINE_CLEAR> {\n  count: number\n}\n\nexport interface ResetClearedLinesGameAction\n  extends Action<GameActionType.RESET_LINE_CLEARS> {}\n\nexport type GameActions =\n  | SetStatusGameAction\n  | AddClearedLinesGameAction\n  | ResetClearedLinesGameAction\n\n// implementations\n\nexport const setStatus = (status: GameStatus): SetStatusGameAction => ({\n  type: GameActionType.SET_STATUS,\n  status,\n})\n\nexport const addClearedLines = (count: number): AddClearedLinesGameAction => ({\n  type: GameActionType.ADD_LINE_CLEAR,\n  count,\n})\n\nexport const resetClearedLines = (): ResetClearedLinesGameAction => ({\n  type: GameActionType.RESET_LINE_CLEARS,\n})\n","import { Reducer } from 'redux'\nimport { GameActions, GameActionType } from '../actions/game'\n\nexport enum GameStatus {\n  PENDING = 'Game Pending',\n  ACTIVE = 'Game Active',\n  PAUSED = 'Game Paused',\n  OVER = 'Game Over',\n}\n\nexport interface GameState {\n  status: GameStatus\n  lineClears: number[]\n}\n\nconst initialState: GameState = {\n  status: GameStatus.PENDING,\n  lineClears: [],\n}\n\nexport const gameReducer: Reducer<GameState, GameActions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case GameActionType.SET_STATUS:\n      return {\n        ...state,\n        status: action.status,\n      }\n    case GameActionType.ADD_LINE_CLEAR:\n      return {\n        ...state,\n        lineClears: [...state.lineClears, action.count],\n      }\n    case GameActionType.RESET_LINE_CLEARS:\n      return {\n        ...state,\n        lineClears: [],\n      }\n    default:\n      return state\n  }\n}\n","import { Action } from 'redux'\nimport { Message } from '../reducers/messages'\n\n// types & type guards\n\nexport enum MessagesActionType {\n  ADD = 'MESSAGES_ADD',\n  RESET = 'MESSAGES_RESET',\n}\n\nexport interface AddMessagesAction extends Action<MessagesActionType.ADD> {\n  message: Message\n}\n\nexport interface ResetMessagesAction extends Action<MessagesActionType.RESET> {}\n\nexport type MessagesActions = AddMessagesAction | ResetMessagesAction\n\n// implementations\n\nexport const addMessage = (message: Message): AddMessagesAction => ({\n  type: MessagesActionType.ADD,\n  message,\n})\n\nexport const resetMessages = (): ResetMessagesAction => ({\n  type: MessagesActionType.RESET,\n})\n","import { GameStatus } from '../redux/reducers/game'\n\nexport const isGameInProgress = (status: GameStatus): boolean =>\n  status === GameStatus.ACTIVE || status === GameStatus.PAUSED\n\nexport const getLevel = (lineClears: number[]) =>\n  1 + Math.floor(lineClears.reduce((s, c) => s + c, 0) / 10)\n\nexport const getDescentDelay = (level: number) =>\n  Math.max(100, 1000 - (level - 1) * 100)\n","import { createSelector } from 'reselect'\nimport { getLevel as getLevelUtil } from '../../utils/game'\nimport { GameState } from '../reducers/game'\nimport { RootState } from '../reducers/root'\n\nexport const getGame = (state: RootState): GameState => state.game\n\nexport const getStatus = createSelector(getGame, (game) => game.status)\n\nexport const getLineClears = createSelector(getGame, (game) => game.lineClears)\n\nexport const getLineClearsCount = (lineCount: number) =>\n  createSelector(\n    getLineClears,\n    (lineClears) => lineClears.filter((l) => l === lineCount).length\n  )\n\nexport const getTotalLinesCleared = createSelector(\n  getLineClears,\n  (lineClears) => lineClears.reduce((r, c) => r + c, 0)\n)\n\nexport const getLevel = createSelector(getLineClears, getLevelUtil)\n\nexport const getScore = createSelector(getLineClears, (lineClears) =>\n  lineClears.reduce(\n    (score, lineCount, i, a) =>\n      score + [100, 300, 500, 800][lineCount - 1] * getLevelUtil(a.slice(0, i)),\n    0\n  )\n)\n","import { GameStatus } from '../redux/reducers/game'\nimport { isGameInProgress } from './game'\n\nexport const isGameStartable = (status: GameStatus): boolean =>\n  status === GameStatus.PENDING\n\nexport const isGamePausable = (status: GameStatus): boolean =>\n  isGameInProgress(status)\n\nexport const isGameEndable = (status: GameStatus): boolean =>\n  isGameInProgress(status)\n\nexport const isGameCreatable = (status: GameStatus): boolean =>\n  status === GameStatus.OVER\n\nexport const isPieceControllable = (status: GameStatus): boolean =>\n  status === GameStatus.ACTIVE\n","import { useEffect } from 'react'\n\nexport const useKey = (\n  keyCode: string,\n  action: (e: KeyboardEvent) => void,\n  enabled: boolean\n) => {\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (e.code === keyCode) {\n        e.preventDefault()\n        if (enabled) {\n          action(e)\n        }\n      }\n    }\n    document.addEventListener('keydown', handler)\n    return () => {\n      document.removeEventListener('keydown', handler)\n    }\n  }, [keyCode, action, enabled])\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport {\n  EntityRotationDirection,\n  moveEntity,\n  rotateEntity,\n} from '../redux/actions/entities'\nimport { setStatus } from '../redux/actions/game'\nimport { GameStatus } from '../redux/reducers/game'\nimport { getStatus } from '../redux/selectors/game'\nimport {\n  isGamePausable,\n  isGameStartable,\n  isGameEndable,\n  isGameCreatable,\n  isPieceControllable,\n} from '../utils/controls'\nimport { createVector, Movement } from '../utils/vector'\nimport { useKey } from './useKey'\n\nexport const useKeyboardControls = () => {\n  const dispatch = useDispatch()\n  const gameStatus = useSelector(getStatus)\n\n  useKey(\n    'Enter',\n    () => dispatch(setStatus(GameStatus.ACTIVE)),\n    isGameStartable(gameStatus)\n  )\n\n  useKey(\n    'KeyP',\n    () =>\n      dispatch(\n        setStatus(\n          gameStatus === GameStatus.ACTIVE\n            ? GameStatus.PAUSED\n            : GameStatus.ACTIVE\n        )\n      ),\n    isGamePausable(gameStatus)\n  )\n\n  useKey(\n    'Escape',\n    () => dispatch(setStatus(GameStatus.OVER)),\n    isGameEndable(gameStatus)\n  )\n\n  useKey(\n    'F1',\n    () => dispatch(setStatus(GameStatus.PENDING)),\n    isGameCreatable(gameStatus)\n  )\n\n  useKey(\n    'Space',\n    () => dispatch(moveEntity('piece', createVector(0, 25))),\n    isPieceControllable(gameStatus)\n  )\n\n  useKey(\n    'ArrowDown',\n    () => dispatch(moveEntity('piece', Movement.Down)),\n    isPieceControllable(gameStatus)\n  )\n\n  useKey(\n    'ArrowLeft',\n    () => dispatch(moveEntity('piece', Movement.Left)),\n    isPieceControllable(gameStatus)\n  )\n\n  useKey(\n    'ArrowRight',\n    () => dispatch(moveEntity('piece', Movement.Right)),\n    isPieceControllable(gameStatus)\n  )\n\n  useKey(\n    'ArrowUp',\n    (e) =>\n      dispatch(\n        rotateEntity(\n          'piece',\n          EntityRotationDirection[e.ctrlKey ? 'Left' : 'Right']\n        )\n      ),\n    isPieceControllable(gameStatus)\n  )\n}\n","import { GameGrid } from '../ui/GameGrid'\nimport { GameBlock } from '../ui/GameBlock'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getAllBlocks } from '../redux/selectors/entities'\nimport { getPoint } from '../utils/point'\nimport { useKeyboardControls } from '../hooks/useKeyboardControls'\nimport { useEffect } from 'react'\nimport { setStatus } from '../redux/actions/game'\nimport { GameStatus } from '../redux/reducers/game'\nimport { getStatus } from '../redux/selectors/game'\n\nexport const Field: React.FC = () => {\n  const dispatch = useDispatch()\n  const status = useSelector(getStatus)\n  const allBlocks = useSelector(getAllBlocks)\n  useKeyboardControls()\n\n  useEffect(() => {\n    const handler = () => {\n      if (status === GameStatus.ACTIVE) {\n        dispatch(setStatus(GameStatus.PAUSED))\n      }\n    }\n    window.addEventListener('blur', handler)\n    return () => {\n      window.removeEventListener('blur', handler)\n    }\n  }, [dispatch, status])\n\n  return (\n    <GameGrid width={10} height={20}>\n      {Object.entries(allBlocks).map(([blockPointHash, blockConfig]) => {\n        const p = getPoint(blockPointHash)\n        return (\n          <GameBlock\n            key={blockPointHash}\n            color={blockConfig.color}\n            x={p.x}\n            y={p.y}\n          />\n        )\n      })}\n    </GameGrid>\n  )\n}\n","export const InfoGlossary: React.FC = ({ children }) => {\n  return <dl>{children}</dl>\n}\n","export interface InfoGlossaryEntryProps {\n  term: string\n  details: string\n  enabled?: boolean\n}\n\nexport const InfoGlossaryEntry: React.FC<InfoGlossaryEntryProps> = ({\n  term,\n  details,\n  enabled = true,\n}) => {\n  const opacity = enabled ? 1 : 0.5\n  return (\n    <>\n      <dt style={{ opacity }}>{term}</dt>\n      <dd style={{ opacity }}>{details}</dd>\n    </>\n  )\n}\n","export const InfoScreen: React.FC = ({ children }) => {\n  return (\n    <div\n      style={{\n        backgroundColor: 'black',\n        color: 'lightgreen',\n        width: '100%',\n        height: '100%',\n        fontFamily: 'monospace',\n        padding: '16px',\n        boxSizing: 'border-box',\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","export interface InfoSectionProps {\n  header: string\n}\n\nexport const InfoSection: React.FC<InfoSectionProps> = ({\n  header,\n  children,\n}) => {\n  return (\n    <div>\n      <h2>{header}</h2>\n      {children}\n    </div>\n  )\n}\n","export const InfoTable: React.FC = ({ children }) => {\n  return (\n    <table style={{ borderCollapse: 'collapse' }}>\n      <tbody>{children}</tbody>\n    </table>\n  )\n}\n","export const InfoTableCell: React.FC = ({ children }) => {\n  return <td>: {children}</td>\n}\n","export const InfoTableHeader: React.FC = ({ children }) => {\n  return (\n    <th scope=\"row\" style={{ fontWeight: 'normal', textAlign: 'left' }}>\n      {children}\n    </th>\n  )\n}\n","export const InfoTableRow: React.FC = ({ children }) => {\n  return <tr>{children}</tr>\n}\n","import { useSelector } from 'react-redux'\nimport { GameStatus } from '../redux/reducers/game'\nimport {\n  getLevel,\n  getLineClearsCount,\n  getScore,\n  getStatus,\n  getTotalLinesCleared,\n} from '../redux/selectors/game'\nimport { InfoGlossary } from '../ui/InfoGlossary'\nimport { InfoGlossaryEntry as Entry } from '../ui/InfoGlossaryEntry'\nimport { InfoScreen } from '../ui/InfoScreen'\nimport { InfoSection } from '../ui/InfoSection'\nimport { InfoTable } from '../ui/InfoTable'\nimport { InfoTableCell as Cell } from '../ui/InfoTableCell'\nimport { InfoTableHeader as Header } from '../ui/InfoTableHeader'\nimport { InfoTableRow as Row } from '../ui/InfoTableRow'\nimport {\n  isPieceControllable,\n  isGameCreatable,\n  isGameEndable,\n  isGamePausable,\n  isGameStartable,\n} from '../utils/controls'\nimport { version } from '../../package.json'\n\nexport const Info: React.FC = () => {\n  const gameStatus = useSelector(getStatus)\n  const totalLinesCleared = useSelector(getTotalLinesCleared)\n  const singleLineClears = useSelector(getLineClearsCount(1))\n  const doubleLineClears = useSelector(getLineClearsCount(2))\n  const tripleLineClears = useSelector(getLineClearsCount(3))\n  const quadLineClears = useSelector(getLineClearsCount(4))\n  const score = useSelector(getScore)\n  const level = useSelector(getLevel)\n\n  const isControllable = isPieceControllable(gameStatus)\n\n  return (\n    <InfoScreen>\n      <h1>Blocks</h1>\n      <InfoTable>\n        <Row>\n          <Header>Version</Header>\n          <Cell>{version}</Cell>\n        </Row>\n        <Row>\n          <Header>Source</Header>\n          <Cell>\n            <a\n              href=\"https://github.com/TalhaAydin/blocks\"\n              style={{ color: 'white' }}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              github.com/TalhaAydin/blocks\n            </a>\n          </Cell>\n        </Row>\n      </InfoTable>\n      <div\n        style={{\n          display: 'flex',\n        }}\n      >\n        <div\n          style={{\n            flex: '0 0 auto',\n          }}\n        >\n          <InfoSection header=\"Game\">\n            <InfoTable>\n              <Row>\n                <Header>Status</Header>\n                <Cell>{gameStatus}</Cell>\n              </Row>\n              <Row>\n                <Header>Level</Header>\n                <Cell>{level}</Cell>\n              </Row>\n              <Row>\n                <Header>Score</Header>\n                <Cell>{score}</Cell>\n              </Row>\n            </InfoTable>\n          </InfoSection>\n          <InfoSection header=\"Statistics\">\n            <InfoTable>\n              <Row>\n                <Header>1-Line clears</Header>\n                <Cell>{singleLineClears} x 1</Cell>\n              </Row>\n              <Row>\n                <Header>2-Line clears</Header>\n                <Cell>{doubleLineClears} x 2</Cell>\n              </Row>\n              <Row>\n                <Header>3-Line clears</Header>\n                <Cell>{tripleLineClears} x 3</Cell>\n              </Row>\n              <Row>\n                <Header>4-Line clears</Header>\n                <Cell>{quadLineClears} x 4</Cell>\n              </Row>\n              <Row>\n                <Header>Total lines cleared</Header>\n                <Cell>{totalLinesCleared}</Cell>\n              </Row>\n            </InfoTable>\n          </InfoSection>\n        </div>\n        <div\n          style={{\n            flex: '0 0 auto',\n            marginLeft: '32px',\n          }}\n        >\n          <InfoSection header=\"Game controls\">\n            <InfoGlossary>\n              <Entry\n                term=\"⌨ F1\"\n                details=\"Create a new game\"\n                enabled={isGameCreatable(gameStatus)}\n              />\n              <Entry\n                term=\"⌨ Enter\"\n                details=\"Start game\"\n                enabled={isGameStartable(gameStatus)}\n              />\n              <Entry\n                term=\"⌨ P\"\n                details={`${\n                  gameStatus === GameStatus.PAUSED ? 'Unpause' : 'Pause'\n                } game`}\n                enabled={isGamePausable(gameStatus)}\n              />\n              <Entry\n                term=\"⌨ Escape\"\n                details=\"End game\"\n                enabled={isGameEndable(gameStatus)}\n              />\n            </InfoGlossary>\n          </InfoSection>\n          <InfoSection header=\"Block controls\">\n            <InfoGlossary>\n              <Entry\n                term=\"⌨ Left\"\n                details=\"Move left\"\n                enabled={isControllable}\n              />\n              <Entry\n                term=\"⌨ Right\"\n                details=\"Move right\"\n                enabled={isControllable}\n              />\n              <Entry\n                term=\"⌨ Down\"\n                details=\"Move down\"\n                enabled={isControllable}\n              />\n              <Entry\n                term=\"⌨ Up\"\n                details=\"Rotate right\"\n                enabled={isControllable}\n              />\n              <Entry\n                term=\"⌨ Ctrl + Up\"\n                details=\"Rotate left\"\n                enabled={isControllable}\n              />\n              <Entry\n                term=\"⌨ Space\"\n                details=\"Drop to bottom\"\n                enabled={isControllable}\n              />\n            </InfoGlossary>\n          </InfoSection>\n        </div>\n      </div>\n    </InfoScreen>\n  )\n}\n","import { Field } from './Field'\nimport { Info } from './Info'\n\nexport const App: React.FC = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        height: '100%',\n      }}\n    >\n      <div\n        style={{\n          flex: '0 0 50vh',\n        }}\n      >\n        <Field />\n      </div>\n      <div\n        style={{\n          flex: '1 1 auto',\n        }}\n      >\n        <Info />\n      </div>\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","export interface Size {\n  readonly width: number\n  readonly height: number\n}\n\nexport const createSize = (width: number, height: number): Size => ({\n  width,\n  height,\n})\n","import { Reducer } from 'redux'\nimport {\n  EntitiesActions,\n  EntitiesActionType,\n  isEntitiesActionWithTarget,\n} from '../actions/entities'\nimport { getNextEntityRotation } from '../../utils/entities'\nimport { addVector, Vector } from '../../utils/vector'\nimport { Blocks, filterBlocks } from '../../utils/blocks'\nimport { getHash } from '../../utils/coordinate'\n\nexport type EntityPosition = Vector\nexport type EntityRotation = number // 0 | 90 | 180 | 270\nexport type EntityShape = Blocks\n\nexport type EntityID = string\nexport interface EntityData {\n  readonly shape: EntityShape\n  readonly position: EntityPosition\n  readonly rotation: EntityRotation\n}\n\nexport type EntitiesState = Record<EntityID, EntityData>\n\nconst initialState: EntitiesState = {}\n\nexport const entitiesReducer: Reducer<EntitiesState, EntitiesActions> = (\n  state = initialState,\n  action\n) => {\n  if (isEntitiesActionWithTarget(action) && !state[action.id]) {\n    console.warn(`Entity with id '${action.id}' does not exist`)\n    return state\n  }\n\n  switch (action.type) {\n    case EntitiesActionType.ADD:\n      return {\n        ...state,\n        [action.id]: action.data,\n      }\n    case EntitiesActionType.MOVE:\n      return {\n        ...state,\n        [action.id]: {\n          ...state[action.id],\n          position: addVector(state[action.id].position, action.vector),\n        },\n      }\n    case EntitiesActionType.ROTATE:\n      return {\n        ...state,\n        [action.id]: {\n          ...state[action.id],\n          rotation: getNextEntityRotation(\n            state[action.id].rotation,\n            action.direction\n          ),\n        },\n      }\n    case EntitiesActionType.DELETE:\n      const nextState = { ...state }\n      delete nextState[action.id]\n      return nextState\n    case EntitiesActionType.ADD_BLOCKS:\n      return {\n        ...state,\n        [action.id]: {\n          ...state[action.id],\n          shape: {\n            ...state[action.id].shape,\n            ...action.blocks,\n          },\n        },\n      }\n    case EntitiesActionType.DELETE_BLOCKS:\n      const pointHashes = action.points.map(getHash)\n      return {\n        ...state,\n        [action.id]: {\n          ...state[action.id],\n          shape: filterBlocks(\n            state[action.id].shape,\n            (point) => !pointHashes.includes(getHash(point))\n          ),\n        },\n      }\n    case EntitiesActionType.SET_BLOCKS:\n      return {\n        ...state,\n        [action.id]: {\n          ...state[action.id],\n          shape: action.blocks,\n        },\n      }\n    case EntitiesActionType.RESET:\n      return initialState\n    default:\n      return state\n  }\n}\n","import { Reducer } from 'redux'\nimport { MessagesActions, MessagesActionType } from '../actions/messages'\n\nexport interface Message {\n  content: string\n}\n\nexport type MessagesState = Message[]\n\nconst initialState: MessagesState = []\n\nexport const messagesReducer: Reducer<MessagesState, MessagesActions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case MessagesActionType.ADD:\n      return [...state, action.message]\n    case MessagesActionType.RESET:\n      return initialState\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { entitiesReducer as entities } from './entities'\nimport { gameReducer as game } from './game'\nimport { messagesReducer as messages } from './messages'\n\nexport const rootReducer = combineReducers({\n  entities,\n  game,\n  messages,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import { getHash } from './coordinate'\nimport { createEntityData } from './entities'\nimport { createPoint } from './point'\nimport { createVector } from './vector'\n\nexport const createIPiece = () =>\n  createEntityData(\n    {\n      [getHash(createPoint(-1, 0))]: { color: 'cyan' },\n      [getHash(createPoint(0, 0))]: { color: 'cyan' },\n      [getHash(createPoint(1, 0))]: { color: 'cyan' },\n      [getHash(createPoint(2, 0))]: { color: 'cyan' },\n    },\n    createVector(4, 0),\n    0\n  )\n\nexport const createOPiece = () =>\n  createEntityData(\n    {\n      [getHash(createPoint(-1, 0))]: { color: 'yellow' },\n      [getHash(createPoint(0, 0))]: { color: 'yellow' },\n      [getHash(createPoint(-1, 1))]: { color: 'yellow' },\n      [getHash(createPoint(0, 1))]: { color: 'yellow' },\n    },\n    createVector(5, 0),\n    0\n  )\n\nexport const createTPiece = () =>\n  createEntityData(\n    {\n      [getHash(createPoint(0, 0))]: { color: 'purple' },\n      [getHash(createPoint(-1, 0))]: { color: 'purple' },\n      [getHash(createPoint(1, 0))]: { color: 'purple' },\n      [getHash(createPoint(0, 1))]: { color: 'purple' },\n    },\n    createVector(5, 0),\n    0\n  )\n\nexport const createJPiece = () =>\n  createEntityData(\n    {\n      [getHash(createPoint(0, 0))]: { color: 'blue' },\n      [getHash(createPoint(0, -1))]: { color: 'blue' },\n      [getHash(createPoint(0, 1))]: { color: 'blue' },\n      [getHash(createPoint(-1, 1))]: { color: 'blue' },\n    },\n    createVector(5, 1),\n    0\n  )\n\nexport const createLPiece = () =>\n  createEntityData(\n    {\n      [getHash(createPoint(0, 0))]: { color: 'orange' },\n      [getHash(createPoint(0, -1))]: { color: 'orange' },\n      [getHash(createPoint(0, 1))]: { color: 'orange' },\n      [getHash(createPoint(1, 1))]: { color: 'orange' },\n    },\n    createVector(4, 1),\n    0\n  )\n\nexport const createSPiece = () =>\n  createEntityData(\n    {\n      [getHash(createPoint(0, 0))]: { color: 'green' },\n      [getHash(createPoint(1, 0))]: { color: 'green' },\n      [getHash(createPoint(0, 1))]: { color: 'green' },\n      [getHash(createPoint(-1, 1))]: { color: 'green' },\n    },\n    createVector(5, 0),\n    0\n  )\n\nexport const createZPiece = () =>\n  createEntityData(\n    {\n      [getHash(createPoint(0, 0))]: { color: 'red' },\n      [getHash(createPoint(-1, 0))]: { color: 'red' },\n      [getHash(createPoint(0, 1))]: { color: 'red' },\n      [getHash(createPoint(1, 1))]: { color: 'red' },\n    },\n    createVector(5, 0),\n    0\n  )\n\nexport const createRandomPiece = () =>\n  [\n    createIPiece,\n    createOPiece,\n    createTPiece,\n    createJPiece,\n    createLPiece,\n    createSPiece,\n    createZPiece,\n  ][Math.floor(Math.random() * 7)].call(null)\n","import { Middleware } from 'redux'\nimport { isEqual } from '../../utils/coordinate'\nimport { getDescentDelay } from '../../utils/game'\nimport { Movement } from '../../utils/vector'\nimport { EntitiesActionType, moveEntity } from '../actions/entities'\nimport { GameStatus } from '../reducers/game'\nimport { hasEntity } from '../selectors/entities'\nimport { getLevel, getStatus } from '../selectors/game'\nimport { AllActions } from '../types'\n\nlet timeoutId: number | null = null\n\nexport const descendPiece: Middleware = ({ getState, dispatch }) => (next) => (\n  action: AllActions\n) => {\n  next(action)\n\n  const state = getState()\n  const status = getStatus(state)\n  const hasPiece = hasEntity('piece')(state)\n  const level = getLevel(state)\n\n  // Clear timeout\n  if (\n    timeoutId &&\n    ((action.type === EntitiesActionType.MOVE &&\n      isEqual(action.vector, Movement.Down)) ||\n      status === GameStatus.PAUSED ||\n      !hasPiece)\n  ) {\n    window.clearTimeout(timeoutId)\n    timeoutId = null\n  }\n\n  // Set timeout\n  if (!timeoutId && status === GameStatus.ACTIVE && hasPiece) {\n    timeoutId = window.setTimeout(() => {\n      timeoutId = null\n      dispatch(moveEntity('piece', Movement.Down))\n    }, getDescentDelay(level))\n  }\n}\n","export const gameMessages = {\n  pending: \"Game created. Press 'Enter' to start the game\",\n  active: \"Game started. Press 'P' to pause and 'ESC' to end the game.\",\n  paused: \"Game paused. Press 'P' again to continue.\",\n  over: \"Game over. Press 'F1' to create a new game.\",\n}\n","import { applyMiddleware, createStore } from 'redux'\nimport { limitMovement } from './middleware/limitMovement'\nimport { rootReducer } from './reducers/root'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { fixRotation } from './middleware/fixRotation'\nimport { buildPile } from './middleware/buildPile'\nimport { addPiece } from './middleware/addPiece'\nimport { clearLines } from './middleware/clearLines'\nimport { gravitatePile } from './middleware/gravitatePile'\nimport { descendPiece } from './middleware/descendPiece'\nimport { logStatusMessage } from './middleware/logMessage'\nimport { addPile } from './middleware/addPile'\nimport { resetGame } from './middleware/resetGame'\nimport { dontRotate } from './middleware/dontRotate'\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      addPiece,\n      dontRotate,\n      buildPile,\n      limitMovement,\n      fixRotation,\n      clearLines,\n      gravitatePile,\n      logStatusMessage,\n      addPile,\n      resetGame,\n      descendPiece\n    )\n  )\n)\n","import { Middleware } from 'redux'\nimport { getPoints } from '../../utils/blocks'\nimport { getPlacedEntityBlocks } from '../../utils/entities'\nimport { isGameInProgress } from '../../utils/game'\nimport { createRandomPiece } from '../../utils/piece'\nimport { getOverlaps } from '../../utils/point'\nimport { addEntity } from '../actions/entities'\nimport { setStatus } from '../actions/game'\nimport { GameStatus } from '../reducers/game'\nimport { getEntities, getEntityData } from '../selectors/entities'\nimport { getStatus } from '../selectors/game'\nimport { AllActions } from '../types'\n\nexport const addPiece: Middleware = ({ dispatch, getState }) => (next) => (\n  action: AllActions\n) => {\n  next(action)\n\n  const state = getState()\n\n  if (!isGameInProgress(getStatus(state)) || getEntityData('piece')(state)) {\n    return\n  }\n\n  const nextPiece = createRandomPiece()\n  const nextPiecePoints = getPoints(getPlacedEntityBlocks(nextPiece))\n  const restPoints = getPoints(\n    getPlacedEntityBlocks(Object.values(getEntities(state)))\n  )\n\n  if (getOverlaps(restPoints)(nextPiecePoints).length > 0) {\n    dispatch(setStatus(GameStatus.OVER))\n  } else {\n    dispatch(addEntity('piece', nextPiece))\n  }\n}\n","import { Middleware } from 'redux'\nimport { getPoints } from '../../utils/blocks'\nimport { createOPiece } from '../../utils/piece'\nimport { getOverlaps } from '../../utils/point'\nimport { EntitiesActionType } from '../actions/entities'\nimport { getEntityData } from '../selectors/entities'\nimport { AllActions } from '../types'\n\nexport const dontRotate: Middleware = ({ dispatch, getState }) => (next) => (\n  action: AllActions\n) => {\n  if (action.type !== EntitiesActionType.ROTATE) {\n    return next(action)\n  }\n\n  const currentPiece = getEntityData(action.id)(getState())\n\n  if (!currentPiece) {\n    return next(action)\n  }\n\n  const oPiecePoints = getPoints(createOPiece().shape)\n  const currentPiecePoints = getPoints(currentPiece.shape)\n\n  if (\n    getOverlaps(oPiecePoints)(currentPiecePoints).length !== oPiecePoints.length\n  ) {\n    return next(action)\n  }\n}\n","import { Middleware } from 'redux'\nimport { isEqual } from '../../utils/coordinate'\nimport { getPlacedEntityBlocks } from '../../utils/entities'\nimport { addVector, isDownVector } from '../../utils/vector'\nimport {\n  addBlocks,\n  deleteEntity,\n  EntitiesActionType,\n  setBlocks,\n} from '../actions/entities'\nimport { getEntityData } from '../selectors/entities'\nimport { AllActions } from '../types'\n\nexport const buildPile: Middleware = ({ dispatch, getState }) => (next) => (\n  action: AllActions\n) => {\n  if (action.type !== EntitiesActionType.MOVE || !isDownVector(action.vector)) {\n    return next(action)\n  }\n\n  const entityBefore = getEntityData(action.id)(getState())\n  if (!entityBefore) {\n    return\n  }\n\n  next(action)\n\n  const entityAfter = getEntityData(action.id)(getState())\n  if (!entityAfter) {\n    return\n  }\n\n  if (\n    isEqual(\n      entityAfter.position,\n      addVector(entityBefore.position, action.vector)\n    )\n  ) {\n    return\n  }\n\n  const blocks = getPlacedEntityBlocks(entityAfter)\n  dispatch(setBlocks(action.id, {}))\n  dispatch(addBlocks('pile', blocks))\n  dispatch(deleteEntity(action.id))\n}\n","import { Middleware } from 'redux'\nimport { getBlockPath, getPoints } from '../../utils/blocks'\nimport { getPlacedEntityBlocks } from '../../utils/entities'\nimport { EntitiesActionType } from '../actions/entities'\nimport { getEntities } from '../selectors/entities'\nimport { AllActions } from '../types'\nimport { addVector, createVector, isZeroVector } from '../../utils/vector'\nimport { getOutOfBounds, getOverlaps } from '../../utils/point'\nimport { createSize } from '../../utils/size'\n\nexport const limitMovement: Middleware = ({ dispatch, getState }) => (next) => (\n  action: AllActions\n) => {\n  if (action.type !== EntitiesActionType.MOVE) {\n    return next(action)\n  }\n\n  const { [action.id]: entityData, ...restEntityData } = getEntities(getState())\n\n  if (!entityData) {\n    return next(action)\n  }\n\n  const restPoints = getPoints(\n    getPlacedEntityBlocks(Object.values(restEntityData))\n  )\n\n  const blockPath = getBlockPath(action.vector)\n\n  const blockPathEndIndex = blockPath.findIndex((_, i, a) => {\n    const points = getPoints(\n      getPlacedEntityBlocks({\n        ...entityData,\n        position: addVector(\n          entityData.position,\n          a.slice(0, i + 1).reduce(addVector, createVector(0, 0))\n        ),\n      })\n    )\n    return (\n      getOutOfBounds(createSize(10, 20))(points).length > 0 ||\n      getOverlaps(restPoints)(points).length > 0\n    )\n  })\n\n  const vector = blockPath\n    .slice(0, blockPathEndIndex === -1 ? undefined : blockPathEndIndex)\n    .reduce(addVector, createVector(0, 0))\n\n  if (!isZeroVector(vector)) {\n    next({ ...action, vector })\n  }\n}\n","import { Middleware } from 'redux'\nimport { getPoints, moveBlocks } from '../../utils/blocks'\nimport {\n  getNextEntityRotation,\n  getPlacedEntityBlocks,\n} from '../../utils/entities'\nimport { getOutOfBounds, getOverlaps } from '../../utils/point'\nimport { createSize } from '../../utils/size'\nimport { addVector, createVector, isZeroVector } from '../../utils/vector'\nimport {\n  addEntity,\n  deleteEntity,\n  EntitiesActionType,\n} from '../actions/entities'\nimport { EntityData } from '../reducers/entities'\nimport { getEntities } from '../selectors/entities'\nimport { AllActions } from '../types'\n\nexport const fixRotation: Middleware = ({ dispatch, getState }) => (next) => (\n  action: AllActions\n) => {\n  if (action.type !== EntitiesActionType.ROTATE) {\n    return next(action)\n  }\n\n  const { [action.id]: entityData, ...restEntityData } = getEntities(getState())\n\n  if (!entityData) {\n    return next(action)\n  }\n\n  const rotatedEntityData: EntityData = {\n    ...entityData,\n    rotation: getNextEntityRotation(entityData.rotation, action.direction),\n  }\n  const placedEntityBlocks = getPlacedEntityBlocks(rotatedEntityData)\n\n  const restPoints = getPoints(\n    getPlacedEntityBlocks(Object.values(restEntityData))\n  )\n\n  const simulationVectors = [\n    createVector(0, 0),\n    createVector(0, -1),\n    createVector(-1, 0),\n    createVector(-2, 0),\n    createVector(1, 0),\n    createVector(2, 0),\n    createVector(0, 1),\n    createVector(0, 2),\n  ]\n\n  simulationVectors.some((v) => {\n    const blocks = moveBlocks(placedEntityBlocks, v)\n    const points = getPoints(blocks)\n\n    if (\n      getOutOfBounds(createSize(10, 20))(points).length === 0 &&\n      getOverlaps(restPoints)(points).length === 0\n    ) {\n      if (isZeroVector(v)) {\n        next(action)\n      } else {\n        dispatch(deleteEntity(action.id))\n        dispatch(\n          addEntity(action.id, {\n            ...rotatedEntityData,\n            position: addVector(rotatedEntityData.position, v),\n          })\n        )\n      }\n      return true\n    }\n\n    return false\n  })\n}\n","import { Middleware } from 'redux'\nimport { Blocks, getPoints, groupByRow } from '../../utils/blocks'\nimport { deleteBlocks, EntitiesActionType } from '../actions/entities'\nimport { addClearedLines } from '../actions/game'\nimport { getEntityData } from '../selectors/entities'\nimport { AllActions } from '../types'\n\nexport const clearLines: Middleware = ({ dispatch, getState }) => (next) => (\n  action: AllActions\n) => {\n  if (action.type !== EntitiesActionType.ADD_BLOCKS) {\n    return next(action)\n  }\n\n  next(action)\n\n  const entityData = getEntityData(action.id)(getState())\n\n  if (!entityData) {\n    return\n  }\n\n  const fullLineBlocks: Blocks = Object.values(groupByRow(entityData.shape))\n    .filter((points) => Object.keys(points).length === 10)\n    .reduce((allBlocks, blocks) => ({ ...allBlocks, ...blocks }), {})\n\n  const fullLinePoints = getPoints(fullLineBlocks)\n\n  if (fullLinePoints.length > 0) {\n    dispatch(deleteBlocks(action.id, fullLinePoints))\n    dispatch(addClearedLines(fullLinePoints.length / 10))\n  }\n}\n","import { Middleware } from 'redux'\nimport { Blocks, groupByRow, mapBlocks } from '../../utils/blocks'\nimport { getNumberSequence } from '../../utils/misc'\nimport { createPoint } from '../../utils/point'\nimport { createSize } from '../../utils/size'\nimport { EntitiesActionType, setBlocks } from '../actions/entities'\nimport { getEntityData } from '../selectors/entities'\nimport { AllActions } from '../types'\n\nexport const gravitatePile: Middleware = ({ dispatch, getState }) => (next) => (\n  action: AllActions\n) => {\n  if (action.type !== EntitiesActionType.DELETE_BLOCKS) {\n    return next(action)\n  }\n\n  next(action)\n\n  const size = createSize(10, 20)\n  const entityData = getEntityData(action.id)(getState())\n\n  if (!entityData) {\n    return\n  }\n\n  const currentRows = groupByRow(entityData.shape)\n  const currentRowKeys = Object.keys(currentRows)\n    .map((k) => parseInt(k, 10))\n    .sort((a, b) => a - b)\n  const currentRowCount = currentRowKeys.length\n\n  const newBlocks = getNumberSequence(\n    size.height - currentRowCount,\n    size.height - 1\n  ).reduce((blocks, rowY, i): Blocks => {\n    return {\n      ...blocks,\n      ...mapBlocks(currentRows[currentRowKeys[i]], (p, c) => [\n        createPoint(p.x, rowY),\n        c,\n      ]),\n    }\n  }, {})\n\n  dispatch(setBlocks(action.id, newBlocks))\n}\n","export const getNumberSequence = (start: number, end: number): number[] =>\n  Array(Math.abs(end - start) + 1)\n    .fill(0)\n    .map(start > end ? (_, i) => start - i : (_, i) => start + i)\n","import { Middleware } from 'redux'\nimport { gameMessages } from '../../utils/messages'\nimport { GameActionType } from '../actions/game'\nimport { addMessage } from '../actions/messages'\nimport { GameStatus } from '../reducers/game'\nimport { AllActions } from '../types'\n\nexport const logStatusMessage: Middleware = ({ dispatch }) => (next) => (\n  action: AllActions\n) => {\n  next(action)\n\n  if (action.type !== GameActionType.SET_STATUS) {\n    return\n  }\n\n  dispatch(\n    addMessage({\n      content: {\n        [GameStatus.PENDING]: gameMessages.pending,\n        [GameStatus.ACTIVE]: gameMessages.active,\n        [GameStatus.PAUSED]: gameMessages.paused,\n        [GameStatus.OVER]: gameMessages.over,\n      }[action.status],\n    })\n  )\n}\n","import { Middleware } from 'redux'\nimport { addEntity } from '../actions/entities'\nimport { GameActionType } from '../actions/game'\nimport { getStatus } from '../selectors/game'\nimport { AllActions } from '../types'\nimport { isGameInProgress } from '../../utils/game'\nimport { createVector } from '../../utils/vector'\n\nexport const addPile: Middleware = ({ dispatch, getState }) => (next) => (\n  action: AllActions\n) => {\n  if (action.type !== GameActionType.SET_STATUS) {\n    return next(action)\n  }\n\n  const previousStatus = getStatus(getState())\n\n  next(action)\n\n  const nextStatus = getStatus(getState())\n\n  if (!isGameInProgress(previousStatus) && isGameInProgress(nextStatus)) {\n    dispatch(\n      addEntity('pile', {\n        shape: {},\n        position: createVector(0, 0),\n        rotation: 0,\n      })\n    )\n  }\n}\n","import { Middleware } from 'redux'\nimport { resetEntities } from '../actions/entities'\nimport { GameActionType, resetClearedLines } from '../actions/game'\nimport { resetMessages } from '../actions/messages'\nimport { GameStatus } from '../reducers/game'\nimport { AllActions } from '../types'\n\nexport const resetGame: Middleware = ({ dispatch }) => (next) => (\n  action: AllActions\n) => {\n  next(action)\n\n  if (\n    action.type === GameActionType.SET_STATUS &&\n    action.status === GameStatus.PENDING\n  ) {\n    dispatch(resetEntities())\n    dispatch(resetMessages())\n    dispatch(resetClearedLines())\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { App } from './components/App'\nimport reportWebVitals from './reportWebVitals'\nimport { store } from './redux/store'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}